// <auto-generated />
using System;
using Hermes.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hermes.Migrations
{
    [DbContext(typeof(HermesContext))]
    partial class HermesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hermes.Models.HermesMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("HermesMessages", (string)null);
                });

            modelBuilder.Entity("Hermes.Models.HermesUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("HermesUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0748a88b-10a2-4def-b249-0861550aee57",
                            Email = "testGroup@haha.com",
                            EmailConfirmed = false,
                            IsGroup = true,
                            LockoutEnabled = false,
                            Name = "testGroup",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f407d11-0e38-4585-bc69-11f2c8ef2792",
                            TwoFactorEnabled = false,
                            UserName = "testGroup@haha.com"
                        },
                        new
                        {
                            Id = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a4c8fcb-6d1f-4e2a-bcd0-53a7414d929e",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha0",
                            NormalizedUserName = "haha0@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELkUohcH2NYpJCrDnTp2IhAnmUZgCWDDNlF8dqaOmoRcKxKLJSpK78Vne/Rn9XRlsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15d196ae-055c-449e-974e-f8aef922eea2",
                            TwoFactorEnabled = false,
                            UserName = "haha0@haha.com"
                        },
                        new
                        {
                            Id = new Guid("d8793545-96c6-4901-8114-78d82c01504f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9374037-de98-4997-be18-3a4368dbb31f",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha1",
                            NormalizedUserName = "haha1@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEI97Km/uRYo81wmG9qJsLOFO36KrLEbsgBONSEpkC//l3nOh9FRBv9zHY4Bxg7qfPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9dcad3f4-3720-49bf-8d95-0beb23e05ecf",
                            TwoFactorEnabled = false,
                            UserName = "haha1@haha.com"
                        },
                        new
                        {
                            Id = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed5adcf4-0b96-4587-b9b9-2ffa70e6a259",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha2",
                            NormalizedUserName = "haha2@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDU8UT7Oynzi2GIWXZqTQIzGqlfBdMx0Y2AdpKcATeEPfvyHJ+voWqvlUp9qRmVxcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ca81c1b-c8c9-45c7-b743-8d238dc35f77",
                            TwoFactorEnabled = false,
                            UserName = "haha2@haha.com"
                        },
                        new
                        {
                            Id = new Guid("038da423-3391-4217-a21c-5b8ae593d52e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a522df9b-ef72-4868-bc25-f8681f43d4ed",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha3",
                            NormalizedUserName = "haha3@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENMCwtW/5UwYc6y/BAIFSP4LEI5jll7BaeIeLZeNtXFRNt3iT4mfy1J7MI0UlA9djg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7661f57b-c9c0-41d4-b318-f351024e963e",
                            TwoFactorEnabled = false,
                            UserName = "haha3@haha.com"
                        },
                        new
                        {
                            Id = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71b1cab5-890e-4c76-8868-2d8cdc001dc7",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha4",
                            NormalizedUserName = "haha4@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDlb5Kvq/Bpzjr3LDep7P69KOZqFj0zIRK6y4Gk/oviSZRNEeN1eFc2hQVlilr2tNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d40ac185-b6a6-4dad-a6d5-a3d08c126276",
                            TwoFactorEnabled = false,
                            UserName = "haha4@haha.com"
                        });
                });

            modelBuilder.Entity("HermesUserContacts", b =>
                {
                    b.Property<Guid>("HermesUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HermesUserId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("HermesUserContacts");

                    b.HasData(
                        new
                        {
                            HermesUserId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07"),
                            ContactId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07")
                        },
                        new
                        {
                            HermesUserId = new Guid("d8793545-96c6-4901-8114-78d82c01504f"),
                            ContactId = new Guid("d8793545-96c6-4901-8114-78d82c01504f")
                        },
                        new
                        {
                            HermesUserId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df"),
                            ContactId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df")
                        },
                        new
                        {
                            HermesUserId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e"),
                            ContactId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e")
                        },
                        new
                        {
                            HermesUserId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35"),
                            ContactId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35")
                        },
                        new
                        {
                            HermesUserId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07"),
                            ContactId = new Guid("d8793545-96c6-4901-8114-78d82c01504f")
                        },
                        new
                        {
                            HermesUserId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07"),
                            ContactId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df")
                        },
                        new
                        {
                            HermesUserId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07"),
                            ContactId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e")
                        },
                        new
                        {
                            HermesUserId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07"),
                            ContactId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35")
                        },
                        new
                        {
                            HermesUserId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07"),
                            ContactId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee"),
                            ContactId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07")
                        },
                        new
                        {
                            HermesUserId = new Guid("d8793545-96c6-4901-8114-78d82c01504f"),
                            ContactId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07")
                        },
                        new
                        {
                            HermesUserId = new Guid("d8793545-96c6-4901-8114-78d82c01504f"),
                            ContactId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df")
                        },
                        new
                        {
                            HermesUserId = new Guid("d8793545-96c6-4901-8114-78d82c01504f"),
                            ContactId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e")
                        },
                        new
                        {
                            HermesUserId = new Guid("d8793545-96c6-4901-8114-78d82c01504f"),
                            ContactId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35")
                        },
                        new
                        {
                            HermesUserId = new Guid("d8793545-96c6-4901-8114-78d82c01504f"),
                            ContactId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee"),
                            ContactId = new Guid("d8793545-96c6-4901-8114-78d82c01504f")
                        },
                        new
                        {
                            HermesUserId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df"),
                            ContactId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07")
                        },
                        new
                        {
                            HermesUserId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df"),
                            ContactId = new Guid("d8793545-96c6-4901-8114-78d82c01504f")
                        },
                        new
                        {
                            HermesUserId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df"),
                            ContactId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e")
                        },
                        new
                        {
                            HermesUserId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df"),
                            ContactId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35")
                        },
                        new
                        {
                            HermesUserId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df"),
                            ContactId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee"),
                            ContactId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df")
                        },
                        new
                        {
                            HermesUserId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e"),
                            ContactId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07")
                        },
                        new
                        {
                            HermesUserId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e"),
                            ContactId = new Guid("d8793545-96c6-4901-8114-78d82c01504f")
                        },
                        new
                        {
                            HermesUserId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e"),
                            ContactId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df")
                        },
                        new
                        {
                            HermesUserId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e"),
                            ContactId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35")
                        },
                        new
                        {
                            HermesUserId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e"),
                            ContactId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee"),
                            ContactId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e")
                        },
                        new
                        {
                            HermesUserId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35"),
                            ContactId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07")
                        },
                        new
                        {
                            HermesUserId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35"),
                            ContactId = new Guid("d8793545-96c6-4901-8114-78d82c01504f")
                        },
                        new
                        {
                            HermesUserId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35"),
                            ContactId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df")
                        },
                        new
                        {
                            HermesUserId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35"),
                            ContactId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e")
                        },
                        new
                        {
                            HermesUserId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35"),
                            ContactId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee"),
                            ContactId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35")
                        });
                });

            modelBuilder.Entity("HermesUserGroups", b =>
                {
                    b.Property<Guid>("HermesUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HermesUserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("HermesUserGroups");

                    b.HasData(
                        new
                        {
                            HermesUserId = new Guid("2af2ada0-ad1f-4494-b038-db75d813fe07"),
                            GroupId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("d8793545-96c6-4901-8114-78d82c01504f"),
                            GroupId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("eb975911-ba67-4365-b970-3e7fd1aab7df"),
                            GroupId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("038da423-3391-4217-a21c-5b8ae593d52e"),
                            GroupId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        },
                        new
                        {
                            HermesUserId = new Guid("e48d16be-738d-473f-8505-fcd121d8ef35"),
                            GroupId = new Guid("4557069d-02ce-48bc-b728-72e5991dd3ee")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HermesUserContacts", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("HermesUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HermesUserGroups", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("HermesUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
