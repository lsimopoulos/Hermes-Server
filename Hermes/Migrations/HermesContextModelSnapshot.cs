// <auto-generated />
using System;
using Hermes.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hermes.Migrations
{
    [DbContext(typeof(HermesContext))]
    partial class HermesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hermes.Models.HermesMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("HermesMessages", (string)null);
                });

            modelBuilder.Entity("Hermes.Models.HermesUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("HermesUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cc8fc94-c3e2-4ae0-8feb-e5d321a5b508",
                            Email = "testGroup@haha.com",
                            EmailConfirmed = false,
                            IsGroup = true,
                            LockoutEnabled = false,
                            Name = "testGroup",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73db1892-5227-4455-81d3-c146329c9ec3",
                            TwoFactorEnabled = false,
                            UserName = "testGroup@haha.com"
                        },
                        new
                        {
                            Id = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39781d67-b70e-4265-8269-e3efbf59b1ed",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha0",
                            NormalizedUserName = "haha0@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEPPr4tGT4Z1GgopMNI5dphnFft5oTEknVmmUwfoc1Ya2l+0Yd6KpDYncOi5yrHNQog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fc3c223-0273-4f85-b044-1e713346b971",
                            TwoFactorEnabled = false,
                            UserName = "haha0@haha.com"
                        },
                        new
                        {
                            Id = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93a20090-a678-43d0-86b4-c5da1411a8eb",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha1",
                            NormalizedUserName = "haha1@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdR4tn/pMvITt+stWbakoNEdvUKstzJq+j1WYGEKUt1fXdVDFrgp0dRHm8IelMgzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d59f64f-68d7-4e2a-ba14-d18dce4b3329",
                            TwoFactorEnabled = false,
                            UserName = "haha1@haha.com"
                        },
                        new
                        {
                            Id = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd7d3e8d-2be8-49c0-bfaf-3155208dbfa8",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha2",
                            NormalizedUserName = "haha2@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENbcIPoM6k/Uv+wzWwU0K7B9WrXMzmWR4IepPgGNJB2m7qpZiAEfuNSyjd6guTFfyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4ac2d69-4701-4692-81c0-a09077a5ed7a",
                            TwoFactorEnabled = false,
                            UserName = "haha2@haha.com"
                        },
                        new
                        {
                            Id = new Guid("ea398905-831c-444b-b48f-7072dbb506c9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0641635e-58b1-4106-83e9-a12de1814067",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha3",
                            NormalizedUserName = "haha3@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFer1oLsQqsK916m4sOtMxtDLXyplNAKjO/ufjZiv3K2HXmBhHkAwj9phG4DbeItNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a2265e9-4ced-480f-b200-c570a4811ba8",
                            TwoFactorEnabled = false,
                            UserName = "haha3@haha.com"
                        },
                        new
                        {
                            Id = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a76e0f8d-e84e-4918-858f-47a0a80a4c67",
                            EmailConfirmed = false,
                            IsGroup = false,
                            LockoutEnabled = false,
                            Name = "haha4",
                            NormalizedUserName = "haha4@haha.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEEZEmLZpDkTtKY7kDBJ+5r8omEXGGVZNRBKSBtnRG6y9bXPVFN5d9g4ATbwyhh7zIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66d5570b-9283-47a0-ac5e-b896744aa521",
                            TwoFactorEnabled = false,
                            UserName = "haha4@haha.com"
                        });
                });

            modelBuilder.Entity("HermesUserContacts", b =>
                {
                    b.Property<Guid>("HermesUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HermesUserId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("HermesUserContacts");

                    b.HasData(
                        new
                        {
                            HermesUserId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa"),
                            ContactId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa")
                        },
                        new
                        {
                            HermesUserId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f"),
                            ContactId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f")
                        },
                        new
                        {
                            HermesUserId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb"),
                            ContactId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb")
                        },
                        new
                        {
                            HermesUserId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9"),
                            ContactId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9")
                        },
                        new
                        {
                            HermesUserId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb"),
                            ContactId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb")
                        },
                        new
                        {
                            HermesUserId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa"),
                            ContactId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f")
                        },
                        new
                        {
                            HermesUserId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa"),
                            ContactId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb")
                        },
                        new
                        {
                            HermesUserId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa"),
                            ContactId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9")
                        },
                        new
                        {
                            HermesUserId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa"),
                            ContactId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb")
                        },
                        new
                        {
                            HermesUserId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa"),
                            ContactId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea"),
                            ContactId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa")
                        },
                        new
                        {
                            HermesUserId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f"),
                            ContactId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa")
                        },
                        new
                        {
                            HermesUserId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f"),
                            ContactId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb")
                        },
                        new
                        {
                            HermesUserId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f"),
                            ContactId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9")
                        },
                        new
                        {
                            HermesUserId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f"),
                            ContactId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb")
                        },
                        new
                        {
                            HermesUserId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f"),
                            ContactId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea"),
                            ContactId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f")
                        },
                        new
                        {
                            HermesUserId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb"),
                            ContactId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa")
                        },
                        new
                        {
                            HermesUserId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb"),
                            ContactId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f")
                        },
                        new
                        {
                            HermesUserId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb"),
                            ContactId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9")
                        },
                        new
                        {
                            HermesUserId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb"),
                            ContactId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb")
                        },
                        new
                        {
                            HermesUserId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb"),
                            ContactId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea"),
                            ContactId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb")
                        },
                        new
                        {
                            HermesUserId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9"),
                            ContactId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa")
                        },
                        new
                        {
                            HermesUserId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9"),
                            ContactId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f")
                        },
                        new
                        {
                            HermesUserId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9"),
                            ContactId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb")
                        },
                        new
                        {
                            HermesUserId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9"),
                            ContactId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb")
                        },
                        new
                        {
                            HermesUserId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9"),
                            ContactId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea"),
                            ContactId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9")
                        },
                        new
                        {
                            HermesUserId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb"),
                            ContactId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa")
                        },
                        new
                        {
                            HermesUserId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb"),
                            ContactId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f")
                        },
                        new
                        {
                            HermesUserId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb"),
                            ContactId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb")
                        },
                        new
                        {
                            HermesUserId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb"),
                            ContactId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9")
                        },
                        new
                        {
                            HermesUserId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb"),
                            ContactId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea"),
                            ContactId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb")
                        });
                });

            modelBuilder.Entity("HermesUserGroups", b =>
                {
                    b.Property<Guid>("HermesUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HermesUserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("HermesUserGroups");

                    b.HasData(
                        new
                        {
                            HermesUserId = new Guid("f1ad9e71-adfa-475c-8945-0c24795624aa"),
                            GroupId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("7ed880b2-2fb6-464d-af5d-1dd2f1dec54f"),
                            GroupId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("cd8dbff0-cbfe-4f6c-921c-06abb41968fb"),
                            GroupId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("ea398905-831c-444b-b48f-7072dbb506c9"),
                            GroupId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        },
                        new
                        {
                            HermesUserId = new Guid("06e5492e-bcc8-4b86-9922-04b11349aadb"),
                            GroupId = new Guid("0012d980-ef0b-4b95-80f6-3d7079f2c7ea")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HermesUserContacts", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("HermesUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HermesUserGroups", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("HermesUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Hermes.Models.HermesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
